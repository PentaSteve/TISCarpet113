--- a/net/minecraft/world/WorldServer.java
+++ b/net/minecraft/world/WorldServer.java
@@ -1,8 +1,20 @@
 package net.minecraft.world;
 
+import carpet.commands.lifetime.LifeTimeWorldTracker;
+import carpet.helpers.TickSpeed;
+import carpet.logging.microtiming.MicroTimingLogger;
+import carpet.logging.microtiming.MicroTimingLoggerManager;
+import carpet.logging.microtiming.enums.EventType;
+import carpet.logging.microtiming.enums.TickStage;
+import carpet.logging.microtiming.events.ExecuteBlockEventEvent;
+import carpet.logging.microtiming.tickstages.BlockEventTickStageExtra;
+import carpet.settings.CarpetSettings;
+import carpet.utils.CarpetProfiler;
+import carpet.utils.TISCMConfig;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.util.concurrent.ListenableFuture;
+import it.unimi.dsi.fastutil.Hash;
 import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -14,6 +26,9 @@
 import java.util.stream.Stream;
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
+
+import me.jellysquid.mods.lithium.LithiumConfig;
+import me.jellysquid.mods.lithium.common.world.scheduler.LithiumServerTickScheduler;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockEventData;
 import net.minecraft.block.state.IBlockState;
@@ -93,21 +108,43 @@
     private final EntityTracker entityTracker;
     private final PlayerChunkMap playerChunkMap;
     private final Map<UUID, Entity> entitiesByUuid = Maps.newHashMap();
+    private final MicroTimingLogger microTimingLogger;  // TISCM Micro Timing logger
+    private final LifeTimeWorldTracker lifetimeTracker;  // TISCM lifetime tracker
     public boolean disableLevelSaving;
     private boolean allPlayersSleeping;
     private int updateEntityTick;
     private final Teleporter worldTeleporter;
     private final WorldEntitySpawner entitySpawner = new WorldEntitySpawner();
-    private final ServerTickList<Block> pendingBlockTicks = new ServerTickList<>(this, (p_205341_0_) ->
-    {
-        return p_205341_0_ == null || p_205341_0_.getDefaultState().isAir();
-    }, IRegistry.BLOCK::getKey, IRegistry.BLOCK::getOrDefault, this::tickBlock);
-    private final ServerTickList<Fluid> pendingFluidTicks = new ServerTickList<>(this, (p_205774_0_) ->
-    {
-        return p_205774_0_ == null || p_205774_0_ == Fluids.EMPTY;
-    }, IRegistry.FLUID::getKey, IRegistry.FLUID::getOrDefault, this::tickFluid);
+
+    // Lithium world.tick_scheduler
+    private final ServerTickList<Block> pendingBlockTicks = LithiumConfig.WORLD_TICK_SCHEDULER ?
+            new LithiumServerTickScheduler<>(this, (p_205341_0_) ->
+            {
+                return p_205341_0_ == null || p_205341_0_.getDefaultState().isAir();
+            }, IRegistry.BLOCK::getKey, IRegistry.BLOCK::getOrDefault, this::tickBlock) :
+            new ServerTickList<>(this, (p_205341_0_) ->
+            {
+                return p_205341_0_ == null || p_205341_0_.getDefaultState().isAir();
+            }, IRegistry.BLOCK::getKey, IRegistry.BLOCK::getOrDefault, this::tickBlock);
+    private final ServerTickList<Fluid> pendingFluidTicks = LithiumConfig.WORLD_TICK_SCHEDULER ?
+            new LithiumServerTickScheduler<>(this, (p_205774_0_) ->
+            {
+                return p_205774_0_ == null || p_205774_0_ == Fluids.EMPTY;
+            }, IRegistry.FLUID::getKey, IRegistry.FLUID::getOrDefault, this::tickFluid) :
+            new ServerTickList<>(this, (p_205774_0_) ->
+            {
+                return p_205774_0_ == null || p_205774_0_ == Fluids.EMPTY;
+            }, IRegistry.FLUID::getKey, IRegistry.FLUID::getOrDefault, this::tickFluid);
+    // Lithium world.tick_scheduler ends
+
     protected final VillageSiege villageSiege = new VillageSiege(this);
-    ObjectLinkedOpenHashSet<BlockEventData> blockEventQueue = new ObjectLinkedOpenHashSet<>();
+
+    // TISCM Smaller hashset list container load factor
+    ObjectLinkedOpenHashSet<BlockEventData> blockEventQueue =
+            TISCMConfig.HASH_SET_LIST_LOAD_FACTOR ?
+            new ObjectLinkedOpenHashSet<>(Hash.DEFAULT_INITIAL_SIZE, Hash.VERY_FAST_LOAD_FACTOR) :
+            new ObjectLinkedOpenHashSet<>();
+
     private boolean insideTick;
 
     public WorldServer(MinecraftServer server, ISaveHandler p_i49819_2_, WorldSavedDataStorage p_i49819_3_, WorldInfo p_i49819_4_, DimensionType p_i49819_5_, Profiler p_i49819_6_)
@@ -122,13 +159,37 @@
         this.calculateInitialSkylight();
         this.calculateInitialWeather();
         this.getWorldBorder().setSize(server.getMaxWorldSize());
+
+        this.microTimingLogger = new MicroTimingLogger(this);  // TISCM Micro Timing logger
+        this.lifetimeTracker = new LifeTimeWorldTracker(this);  // TISCM lifetime tracker
     }
 
+    public MicroTimingLogger getMicroTickLogger()  // TISCM Micro Timing logger
+    {
+        return this.microTimingLogger;
+    }
+
+    public LifeTimeWorldTracker getLifeTimeWorldTracker()  // TISCM lifetime tracker
+    {
+        return this.lifetimeTracker;
+    }
+
+    // vanilla reserved interface
     public WorldServer init()
     {
+        return this.init(true);
+    }
+
+    // CM world edit
+    // added parameter
+    public WorldServer init(boolean readData)
+    {
         String s = VillageCollection.fileNameForProvider(this.dimension);
-        VillageCollection villagecollection = this.getSavedData(DimensionType.OVERWORLD, VillageCollection::new, s);
 
+        // CM world edit readData param
+//        VillageCollection villagecollection = this.getSavedData(DimensionType.OVERWORLD, VillageCollection::new, s);
+        VillageCollection villagecollection = readData ? this.getSavedData(DimensionType.OVERWORLD, VillageCollection::new, s) : null;
+
         if (villagecollection == null)
         {
             this.villageCollection = new VillageCollection(this);
@@ -140,7 +201,9 @@
             this.villageCollection.setWorld(this);
         }
 
-        ScoreboardSaveData scoreboardsavedata = this.getSavedData(DimensionType.OVERWORLD, ScoreboardSaveData::new, "scoreboard");
+        // CM world edit readData param
+//        ScoreboardSaveData scoreboardsavedata = this.getSavedData(DimensionType.OVERWORLD, ScoreboardSaveData::new, "scoreboard");
+        ScoreboardSaveData scoreboardsavedata = readData ? this.getSavedData(DimensionType.OVERWORLD, ScoreboardSaveData::new, "scoreboard") : null;
 
         if (scoreboardsavedata == null)
         {
@@ -191,15 +254,28 @@
             this.wakeAllPlayers();
         }
 
-        this.profiler.startSection("spawner");
+        //CM profiler
+        int did = this.dimension.getType().getId();
+        String world_name = (did==0)?"Overworld":((did<0?"The Nether":"The End"));
+        // CM end
 
-        if (this.getGameRules().getBoolean("doMobSpawning") && this.worldInfo.getGenerator() != WorldType.DEBUG_ALL_BLOCK_STATES)
-        {
-            this.entitySpawner.findChunksForSpawning(this, this.spawnHostileMobs, this.spawnPeacefulMobs, this.worldInfo.getGameTime() % 400L == 0L);
-            this.getChunkProvider().spawnMobs(this, this.spawnHostileMobs, this.spawnPeacefulMobs);
+        if (TickSpeed.process_entities)
+        { // [CM] extra indent to skip processing of entities
+            this.profiler.startSection("spawner");
+            CarpetProfiler.start_section(world_name, "Spawning");
+            MicroTimingLoggerManager.setTickStage(this, TickStage.SPAWNING); // TISCM Micro Timing logger
+
+            if (this.getGameRules().getBoolean("doMobSpawning") && this.worldInfo.getGenerator() != WorldType.DEBUG_ALL_BLOCK_STATES)
+            {
+                this.entitySpawner.findChunksForSpawning(this, this.spawnHostileMobs, this.spawnPeacefulMobs, this.worldInfo.getGameTime() % 400L == 0L);
+                this.getChunkProvider().spawnMobs(this, this.spawnHostileMobs, this.spawnPeacefulMobs);
+            }
+            CarpetProfiler.end_current_section();
         }
+        // [CM] end extra indent
 
         this.profiler.endStartSection("chunkSource");
+        MicroTimingLoggerManager.setTickStage(this, TickStage.CHUNK_UNLOADING); // TISCM Micro Timing logger
         this.chunkProvider.tick(hasTimeLeft);
         int j = this.calculateSkylightSubtracted(1.0F);
 
@@ -208,26 +284,64 @@
             this.setSkylightSubtracted(j);
         }
 
-        this.worldInfo.setGameTime(this.worldInfo.getGameTime() + 1L);
+        if (TickSpeed.process_entities)
+        { // CM extra indent to skip processing of entities
 
-        if (this.getGameRules().getBoolean("doDaylightCycle"))
-        {
-            this.worldInfo.setDayTime(this.worldInfo.getDayTime() + 1L);
-        }
+            // TISCM Micro Timing logger
+            // Flushes messages right before overworld gametime increases
+            if (this.getDimension().getType() == DimensionType.OVERWORLD)
+            {
+                MicroTimingLoggerManager.flushMessages(this.getGameTime());
+            }
 
-        this.profiler.endStartSection("tickPending");
-        this.tickPending();
+            this.worldInfo.setGameTime(this.worldInfo.getGameTime() + 1L);
+            if (this.getGameRules().getBoolean("doDaylightCycle"))
+            {
+                this.worldInfo.setDayTime(this.worldInfo.getDayTime() + 1L);
+            }
+
+            this.profiler.endStartSection("tickPending");
+            CarpetProfiler.start_section(world_name, "Tile Tick");
+            MicroTimingLoggerManager.setTickStage(this, TickStage.TILE_TICK); // TISCM Micro Timing logger
+            this.tickPending();
+            CarpetProfiler.end_current_section();
+        } // end extra indent
+
         this.profiler.endStartSection("tickBlocks");
+        CarpetProfiler.start_section(world_name, "Chunk Tick");
         this.tickBlocks();
+        CarpetProfiler.end_current_section();
+
         this.profiler.endStartSection("chunkMap");
+        CarpetProfiler.start_section(world_name, "Player Chunk Map");
+        MicroTimingLoggerManager.setTickStage(this, TickStage.PLAYER_CHUNK_MAP); // TISCM Micro Timing logger
         this.playerChunkMap.tick();
+        CarpetProfiler.end_current_section();
+
+        if (TickSpeed.process_entities)
+        { // CM extra indent to skip processing of entities
         this.profiler.endStartSection("village");
+        CarpetProfiler.start_section(world_name, "Villages");
+        MicroTimingLoggerManager.setTickStage(this, TickStage.VILLAGE); // TISCM Micro Timing logger
         this.villageCollection.tick();
         this.villageSiege.tick();
+        CarpetProfiler.end_current_section();
         this.profiler.endStartSection("portalForcer");
+        MicroTimingLoggerManager.setTickStage(this, TickStage.PORTAL_FORCER); // TISCM Micro Timing logger
         this.worldTeleporter.tick(this.getGameTime());
+        }
+        // [TISCM] Newlight
+        if (CarpetSettings.newLight)
+        {
+            this.profiler.endStartSection("lighting");
+            MicroTimingLoggerManager.setTickStage(this, TickStage.NEW_LIGHT); // TISCM Micro Timing logger
+            this.getLightingEngine().procLightUpdates();
+        }
         this.profiler.endSection();
+        CarpetProfiler.start_section(world_name, "Block Events");
+        MicroTimingLoggerManager.setTickStage(this, TickStage.BLOCK_EVENT); // TISCM Micro Timing logger
         this.sendQueuedBlockEvents();
+        CarpetProfiler.end_current_section();
         this.insideTick = false;
     }
 
@@ -270,7 +384,7 @@
                 }
             }
 
-            this.allPlayersSleeping = j > 0 && j >= this.playerEntities.size() - i;
+            this.allPlayersSleeping = j > 0 && (CarpetSettings.onePlayerSleeping || j >= this.playerEntities.size() - i);
         }
     }
 
@@ -306,6 +420,13 @@
     {
         if (this.allPlayersSleeping && !this.isRemote)
         {
+            if (CarpetSettings.onePlayerSleeping)
+            {
+                for (EntityPlayer entityplayer : this.playerEntities)
+                    if (!entityplayer.isSpectator() && entityplayer.isPlayerFullyAsleep())
+                        return true;
+                return false;
+            }
             for (EntityPlayer entityplayer : this.playerEntities)
             {
                 if (!entityplayer.isSpectator() && !entityplayer.isPlayerFullyAsleep())
@@ -397,9 +518,11 @@
             boolean flag1 = this.isThundering();
             this.profiler.startSection("pollingChunks");
 
+            MicroTimingLoggerManager.setTickStage(this, TickStage.CHUNK_TICK); // TISCM Micro Timing logger
             for (Iterator<Chunk> iterator = this.playerChunkMap.getChunkIterator(); iterator.hasNext(); this.profiler.endSection())
             {
                 this.profiler.startSection("getChunk");
+                MicroTimingLoggerManager.setTickStageDetail(this, "TickChunk"); // TISCM Micro Timing logger
                 Chunk chunk = iterator.next();
                 int j = chunk.x * 16;
                 int k = chunk.z * 16;
@@ -407,7 +530,20 @@
                 chunk.enqueueRelightChecks();
                 this.profiler.endStartSection("tickChunk");
                 chunk.tick(false);
+                //[CM] tick freeze
+                if (!TickSpeed.process_entities)
+                { // skipping the rest of the block processing
+                    this.profiler.endSection();
+                    continue;
+                }
+
+                // TISCM chunkTickSpeed
+                for (int chunkTickCounter = 0; chunkTickCounter < CarpetSettings.chunkTickSpeed; chunkTickCounter++)
+                // TISCM chunkTickSpeed bracket starts
+                {
+
                 this.profiler.endStartSection("thunder");
+                MicroTimingLoggerManager.setTickStageDetail(this, "Thunder"); // TISCM Micro Timing logger
 
                 if (flag && flag1 && this.rand.nextInt(100000) == 0)
                 {
@@ -434,6 +570,7 @@
                 }
 
                 this.profiler.endStartSection("iceandsnow");
+                MicroTimingLoggerManager.setTickStageDetail(this, "Ice&Snow"); // TISCM Micro Timing logger
 
                 if (this.rand.nextInt(16) == 0)
                 {
@@ -460,6 +597,7 @@
                 }
 
                 this.profiler.endStartSection("tickBlocks");
+                MicroTimingLoggerManager.setTickStageDetail(this, "RandomTick"); // TISCM Micro Timing logger
 
                 if (i > 0)
                 {
@@ -493,13 +631,21 @@
                         }
                     }
                 }
+
+                // TISCM chunkTickSpeed bracket ends
+                }
             }
 
             this.profiler.endSection();
+
+            // TISCM Micro Timing logger
+            MicroTimingLoggerManager.setTickStageDetail(this, null);
+            MicroTimingLoggerManager.setTickStageExtra(this, null);
+            // end TISCM Micro Timing logger
         }
     }
 
-    protected BlockPos adjustPosToNearbyEntity(BlockPos pos)
+    public BlockPos adjustPosToNearbyEntity(BlockPos pos) // [CM] Changed access to public for summonNaturalLightning
     {
         BlockPos blockpos = this.getHeight(Heightmap.Type.MOTION_BLOCKING, pos);
         AxisAlignedBB axisalignedbb = (new AxisAlignedBB(blockpos, new BlockPos(blockpos.getX(), this.getHeight(), blockpos.getZ()))).grow(3.0D);
@@ -625,12 +771,16 @@
 
     private void tickBlock(NextTickListEntry<Block> blockTickEntry)
     {
+        MicroTimingLoggerManager.onExecuteTileTickEvent(this, blockTickEntry, EventType.ACTION_START);  // TISCM Micro Timing logger
+
         IBlockState iblockstate = this.getBlockState(blockTickEntry.position);
 
         if (iblockstate.getBlock() == blockTickEntry.getTarget())
         {
             iblockstate.tick(this, blockTickEntry.position, this.rand);
         }
+
+        MicroTimingLoggerManager.onExecuteTileTickEvent(this, blockTickEntry, EventType.ACTION_END);  // TISCM Micro Timing logger
     }
 
     public void tickEntity(Entity entityIn, boolean forceUpdate)
@@ -1021,26 +1171,54 @@
 
     public void addBlockEvent(BlockPos pos, Block blockIn, int eventID, int eventParam)
     {
-        this.blockEventQueue.add(new BlockEventData(pos, blockIn, eventID, eventParam));
+        // TISCM Micro Timing logger
+        BlockEventData blockEventData = new BlockEventData(pos, blockIn, eventID, eventParam);
+        boolean success = this.blockEventQueue.add(blockEventData);
+        MicroTimingLoggerManager.onScheduleBlockEvent(this, blockEventData, success);
     }
 
     private void sendQueuedBlockEvents()
     {
+        // TISCM Micro Timing logger
+        int depth = 0, depthSize = this.blockEventQueue.size();
+        int eventCounter = 0, indexInCurrentDepth = 0;
+        // end TISCM Micro Timing logger
+
         while (!this.blockEventQueue.isEmpty())
         {
             BlockEventData blockeventdata = this.blockEventQueue.removeFirst();
 
+            // TISCM Micro Timing logger
+            MicroTimingLoggerManager.setTickStageDetail(this, String.valueOf(depth));
+            MicroTimingLoggerManager.setTickStageExtra(this, new BlockEventTickStageExtra(this, blockeventdata, eventCounter++, depth));
+            // end TISCM Micro Timing logger
+
             if (this.fireBlockEvent(blockeventdata))
             {
-                this.server.getPlayerList().sendToAllNearExcept((EntityPlayer)null, (double)blockeventdata.getPosition().getX(), (double)blockeventdata.getPosition().getY(), (double)blockeventdata.getPosition().getZ(), 64.0D, this.dimension.getType(), new SPacketBlockAction(blockeventdata.getPosition(), blockeventdata.getBlock(), blockeventdata.getEventID(), blockeventdata.getEventParameter()));
+                this.server.getPlayerList().sendToAllNearExcept((EntityPlayer)null, (double)blockeventdata.getPosition().getX(), (double)blockeventdata.getPosition().getY(), (double)blockeventdata.getPosition().getZ(), CarpetSettings.blockEventPacketRange, this.dimension.getType(), new SPacketBlockAction(blockeventdata.getPosition(), blockeventdata.getBlock(), blockeventdata.getEventID(), blockeventdata.getEventParameter()));
             }
+
+            // TISCM Micro Timing logger
+            indexInCurrentDepth++;
+            if (indexInCurrentDepth == depthSize)
+            {
+                depth++;
+                depthSize = this.blockEventQueue.size();
+                indexInCurrentDepth = 0;
+            }
+            // end TISCM Micro Timing logger
         }
     }
 
     private boolean fireBlockEvent(BlockEventData event)
     {
+        MicroTimingLoggerManager.onExecuteBlockEvent(this, event, null, null, EventType.ACTION_START);  // TISCM Micro Timing logger
+
         IBlockState iblockstate = this.getBlockState(event.getPosition());
-        return iblockstate.getBlock() == event.getBlock() ? iblockstate.onBlockEventReceived(this, event.getPosition(), event.getEventID(), event.getEventParameter()) : false;
+        boolean returnValue = iblockstate.getBlock() == event.getBlock() ? iblockstate.onBlockEventReceived(this, event.getPosition(), event.getEventID(), event.getEventParameter()) : false;
+
+        MicroTimingLoggerManager.onExecuteBlockEvent(this, event, returnValue, new ExecuteBlockEventEvent.FailInfo(iblockstate.getBlock() != event.getBlock() ? ExecuteBlockEventEvent.FailReason.BLOCK_CHANGED : ExecuteBlockEventEvent.FailReason.EVENT_FAIL, iblockstate.getBlock()), EventType.ACTION_END);
+        return returnValue;
     }
 
     public void close()
