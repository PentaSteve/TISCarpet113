--- a/net/minecraft/item/ItemBlock.java
+++ b/net/minecraft/item/ItemBlock.java
@@ -1,8 +1,9 @@
 package net.minecraft.item;
 
-import java.util.List;
-import java.util.Map;
-import javax.annotation.Nullable;
+import carpet.helpers.BedrockBreakingStatHelper;
+import carpet.helpers.BlockRotator;
+import carpet.helpers.CreativeNoClipHelper;
+import carpet.settings.CarpetSettings;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.block.Block;
 import net.minecraft.block.SoundType;
@@ -22,6 +23,10 @@
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 
+import javax.annotation.Nullable;
+import java.util.List;
+import java.util.Map;
+
 public class ItemBlock extends Item
 {
     @Deprecated
@@ -73,6 +78,9 @@
                     if (entityplayer instanceof EntityPlayerMP)
                     {
                         CriteriaTriggers.PLACED_BLOCK.trigger((EntityPlayerMP)entityplayer, blockpos, itemstack);
+
+                        // TISCM break_bedrock stat
+                        BedrockBreakingStatHelper.onPlayerPlacedBlock(block, world, blockpos, entityplayer);
                     }
                 }
 
@@ -92,13 +100,44 @@
     @Nullable
     protected IBlockState getStateForPlacement(BlockItemUseContext context)
     {
-        IBlockState iblockstate = this.getBlock().getStateForPlacement(context);
+        // CM accurateBlockPlacement
+//        IBlockState iblockstate = this.getBlock().getStateForPlacement(context);
+        Block block = this.getBlock();
+        IBlockState iblockstate = null;
+        if (CarpetSettings.accurateBlockPlacement)
+        {
+            IBlockState tryAlternative = BlockRotator.alternativeBlockPlacement(block, context);
+            if (tryAlternative != null)
+            {
+                iblockstate = tryAlternative;
+            }
+        }
+        if (iblockstate == null)
+        {
+            iblockstate = block.getStateForPlacement(context);
+        }
+        // CM accurateBlockPlacement ends
+
         return iblockstate != null && this.canPlace(context, iblockstate) ? iblockstate : null;
     }
 
     protected boolean canPlace(BlockItemUseContext p_195944_1_, IBlockState p_195944_2_)
     {
-        return p_195944_2_.isValidPosition(p_195944_1_.getWorld(), p_195944_1_.getPos()) && p_195944_1_.getWorld().checkNoEntityCollision(p_195944_2_, p_195944_1_.getPos());
+        // TISCM blockPlacementIgnoreEntity
+        boolean disableCollisionCheck = false;
+        if (CarpetSettings.blockPlacementIgnoreEntity)
+        {
+            EntityPlayer player = p_195944_1_.player;
+            if (player != null && player.isCreative())
+            {
+                disableCollisionCheck = true;
+            }
+        }
+
+        // creativeNoClip
+        EntityPlayer entityToIgnore = CreativeNoClipHelper.canEntityIgnoreClip(p_195944_1_.player) ? p_195944_1_.player : null;
+
+        return p_195944_2_.isValidPosition(p_195944_1_.getWorld(), p_195944_1_.getPos()) && (disableCollisionCheck || p_195944_1_.getWorld().checkNoEntityCollision(p_195944_2_, p_195944_1_.getPos(), entityToIgnore));
     }
 
     protected boolean placeBlock(BlockItemUseContext context, IBlockState state)
